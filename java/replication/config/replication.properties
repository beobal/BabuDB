#####################################################################
# BabuDB configuration																							#
#####################################################################

# optional debug level (0 = emergency, 1 = alert, 2 = critical, 3 = error, 4 = warning, 5 = notice, 6 = info, 7 = debug)
#babudb.debug.level = 4

# optional debug category
#babudb.debug.category = all

# name for the database configuration file
#babudb.cfgFile = config.db

# base directory to store database index snapshots in
babudb.baseDir = /tmp/babuDB/slaveBase/

# directory in which the database logs are stored
babudb.logDir = /tmp/babuDB/slaveLog/

# SyncMode the synchronization mode to use for the logFile
# ASYNC - asynchronously write log entries (data is lost when system crashes).
# FSYNC - executes an fsync on the logfile before acknowledging the operation.
# FDATASYNC
# SYNC_WRITE - synchronously writes the log entry to disk before ack. Does not
#			   update the metadata.
# SYNC_WRITE_METADATA - synchronously writes the log entry to disk and updates
#			   			the metadat before ack.
babudb.sync = ASYNC

# max queue length: if > 0, the queue for each worker is limited to maxQ
#babudb.worker.maxQueueLength = 0

# number of worker threads to use
#babudb.worker.numThreads = 1

# a checkpoint is generated ,if maxLogfileSize is exceeded
#babudb.maxLogfileSize = 1

# interval between two checks in seconds, 0 disables auto checkPointing
#babudb.checkInterval = 0

# if set to a value > 0, operations are acknowledged immediately before
# they are written to the disk log. The disk logger will do batch writes
# and call fSync... every pseudoSyncWait seconds. This can be used to
# increase performance and emulate PostgreSQL behavior.
#babudb.pseudoSyncWait = 0

# flag that determines whether the indices shall be compressed or not.
#babudb.compression = false

#####################################################################
# BabuDB replication configuration								   								#
#####################################################################

# DB backup directory - needed for the initial loading of the BabuDB from the 
# master in replication context.
babudb.repl.backupDir = /tmp/babuDB/backup/

# number of slaves that at least have to be up to date
babudb.repl.sync.n = 0

# choose here one of the predefined or a user implemented policy for handling 
# database requests:
#
# MasterOnly - will redirect any kind of request to the master.
# NoRestriction - will allow any kind of request to be performed at the local 
# BabuDB instance.
#
# default setting is MasterOnly.
#babudb.repl.policy = MasterOnly

# participants of the replication including the local address
babudb.repl.participant.0 = localhost
babudb.repl.participant.0.port = 35667
babudb.repl.participant.1 = anotherHost.com
babudb.repl.participant.1.port = 35666

# local time renew in milliseconds
#babudb.localTimeRenew = 3000

# specify whether SSL is required
babudb.ssl.enabled = false

# server credentials for SSL handshakes
#babudb.ssl.service_creds = /etc/xos/xtreemfs/truststore/certs/osd.p12
#babudb.ssl.service_creds.pw = xtreemfs
#babudb.ssl.service_creds.container = pkcs12

# trusted certificates for SSL handshakes
#babudb.ssl.trusted_certs = /etc/xos/xtreemfs/truststore/certs/xosrootca.jks
#babudb.ssl.trusted_certs.pw = xtreemfs
#babudb.ssl.trusted_certs.container = jks

#babudb.ssl.authenticationWithoutEncryption = false

# chunk size, for initial load of file chunks
#babudb.repl.chunkSize = 5242880