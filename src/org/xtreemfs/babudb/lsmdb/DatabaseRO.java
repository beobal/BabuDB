/*
 * Copyright (c) 2009, Jan Stender, Bjoern Kolbeck, Mikael Hoegqvist,
 *                     Felix Hupfeld, Felix Langner, Zuse Institute Berlin
 * 
 * Licensed under the BSD License, see LICENSE file for details.
 * 
 */

package org.xtreemfs.babudb.lsmdb;

import java.util.Iterator;
import java.util.Map.Entry;

import org.xtreemfs.babudb.BabuDBException;
import org.xtreemfs.babudb.BabuDBRequestListener;
import org.xtreemfs.babudb.UserDefinedLookup;

public interface DatabaseRO {
    
    /**
     * lookup a single key (synchronously)
     * 
     * @param indexId
     *            index id (0..NumIndices-1)
     * @param key
     *            the key to look up
     * @return a view buffer to the result or null if there is no such entry
     * @throws BabuDBException
     *             if the operation failed
     */
    public byte[] syncLookup(int indexId, byte[] key) throws BabuDBException;
    
    /**
     * executes a prefix lookup (synchronously)
     * 
     * @param indexId
     *            index id (0..NumIndices-1)
     * @param key
     *            the key to start the iterator at
     * @return an iterator to the database starting at the first matching key.
     *         Returns key/value pairs in ascending order.
     * @throws BabuDBException
     *             if the operation failed
     */
    public Iterator<Entry<byte[], byte[]>> syncPrefixLookup(int indexId, byte[] key) throws BabuDBException;
    
    /**
     * synchronous wrapper for asyncUserDefinedLookup
     * 
     * @param udl
     *            the method to be executed
     * @return the result generated by the user defined lookup method
     * @throws BabuDBException
     */
    public Object syncUserDefinedLookup(UserDefinedLookup udl) throws BabuDBException;
    
    /**
     * Lookup a key=value asynchronously
     * 
     * @param indexId
     *            the lookup index
     * @param key
     *            the key to lookup
     * @param listener
     *            a callback for the result
     * @param context
     *            optional context object which is passed to the listener
     * @throws BabuDBException
     */
    public void asyncLookup(int indexId, byte[] key, BabuDBRequestListener listener, Object context)
        throws BabuDBException;
    
    /**
     * asynchronous prefix lookup for a key.
     * 
     * @param indexId
     *            the lookup index
     * @param key
     *            the key to lookup
     * @param listener
     *            a callback for the result
     * @param context
     *            optional context object which is passed to the listener
     * @throws BabuDBException
     */
    public void asyncPrefixLookup(int indexId, byte[] key, BabuDBRequestListener listener, Object context)
        throws BabuDBException;
    
    /**
     * Executes a user defined method in the database worker's thread. This can
     * be more efficient than executing multiple individual lookups (only a
     * single enqueue operations).
     * 
     * @param listener
     *            a result listener
     * @param udl
     *            the method to be executed
     * @param context
     *            arbitrary context which is passed to the listener
     * @throws org.xtreemfs.babudb.BabuDBException
     */
    public void asyncUserDefinedLookup(BabuDBRequestListener listener, UserDefinedLookup udl, Object context)
        throws BabuDBException;
    
    /**
     * Looks up a key in the database. Similar to syncLookup but executes in the
     * context of the calling thread.
     * 
     * @attention direct... methods should not be mixed with the other
     *            sync/async... operations and developers must make sure that
     *            readers and writers are synchronized correctly!
     * @param indexId
     * @param key
     * @return the value associated with the given key
     * @throws org.xtreemfs.babudb.BabuDBException
     */
    public byte[] directLookup(int indexId, byte[] key) throws BabuDBException;
    
    /**
     * Executes a prefix lookup. Similar to syncPrefixLookup but executes in the
     * context of the calling thread.
     * 
     * @param indexId
     *            index id (0..NumIndices-1)
     * @param key
     *            the key to start the iterator at
     * @return an iterator to the database starting at the first matching key.
     *         Returns key/value pairs in ascending order.
     * @throws BabuDBException
     *             if the operation failed
     */
    public Iterator<Entry<byte[], byte[]>> directPrefixLookup(int indexId, byte[] key) throws BabuDBException;
    
    /**
     * Executes a reverse prefix lookup. Similar to syncPrefixLookup but
     * executes in the context of the calling thread.
     * 
     * @param indexId
     *            index id (0..NumIndices-1)
     * @param key
     *            the key to start the iterator at
     * @return an iterator to the database starting at the first matching key.
     *         Returns key/value pairs in ascending order.
     * @throws BabuDBException
     *             if the operation failed
     */
    public Iterator<Entry<byte[], byte[]>> directReversePrefixLookup(int indexId, byte[] key)
        throws BabuDBException;
    
    /**
     * Shuts down the database.
     * 
     * @attention: does not create a final checkpoint!
     */
    public void shutdown() throws BabuDBException;
    
}
